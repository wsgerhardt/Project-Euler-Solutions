"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from functools import lru_cache

        
def bad_divisor_count(value):
    #this is where the most efficiency gains in the algorithm could be made. This algorithm is terrible.
    the_count = 2 #one and the number in question is always assumed 
    i = 2
    while i <= value/2:
        if value % i == 0:
            the_count += 1
            #print(i) #captures non 1 divisors
        i += 1
    return the_count


@lru_cache(maxsize=100)
def gen_triangle_number(n):
    if n == 1:
        return 1
    else:
        return n + gen_triangle_number(n-1)


def super_divisor(value):
    #super fast :)
    the_count = 0 #one and the number in question is always assumed
    i = 1
    max_divisor = value
    divisors =[]
    while i < max_divisor:
        a,b = divmod(value,i)
        #print(a,b)
        if b == 0: 
            divisors.append(i)
            divisors.append(a)
            max_divisor = a
            the_count += 2
        i += 1
    print(value,"has",the_count,"divisors:",divisors)
    return the_count


def solution():
    i = 1
    divisor_count = super_divisor(gen_triangle_number(i))
    while divisor_count < 501:
        i += 1
        divisor_count = super_divisor(gen_triangle_number(i))
        print(i,divisor_count)
    print(i,"The solution is",gen_triangle_number(i))

if __name__ == '__main__':
    print(gen_triangle_number(7))
    print(bad_divisor_count(28))
    #print(bad_divisor_count(gen_triangle_number(3555)))
    print(super_divisor(28))   
    for x in range(1,8):
        print(super_divisor(gen_triangle_number(x)))
    solution() #76576500 tada.

        