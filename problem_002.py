"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""

from functools import lru_cache

@lru_cache()
def fib(n):
    if n <= 2:
        return n
    else:
        return fib(n-1) + fib(n-2)

if __name__ == '__main__':
    x = 1
    cum_sum = 0
    even_sum = 0
    stay = True
    while stay:
        if fib(x) < 4000000: #interpreted as the "values do not exceed four million", meaning the max fib sequence values; my original interpretation..
            cum_sum += fib(x)
            if fib(x) % 2 == 0: #even values terms.... the terms being y not the x. I need to read the f-ing question.
                even_sum += fib(x)
            print("fib sequence",x,"is",fib(x))
            x += 1
        else:
            stay = False
        
    print("Sum of even-numbered values in this condition is:",even_sum)
    #tada. Only took 30 minutes because I didn't read the question right...